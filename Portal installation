


•	Setup your Virtual Machine
Download the latest API portal ova from 
http://www.7layer.ca.com/support
Select open a open a virtual machine(ova)

 

  Pick a unique name for  your OVA   
 
Pick Import  
 
Edit  the virtual machine setting 

 
1.	Base
a.	Start with portal OVA, and rename:

Layer7_Combined_Evaluation_Gateway_v<#>_Portal_v<#>_v<#>

b.	Change image to temporarily use:
i.	4 GB memory
ii.	4 processors
iii.	NAT networking

c.	ssgconfig and root user passwords set permanently to 7layer (won't require change on first use, won't expire, but can be changed at OS level)
i.	Start image
ii.	Login as ssgconfig/7layer, change password to L7Secure$0@
iii.	Access privileged shell using password 7layer, change password to L7Secure$0@
iv.	Change root and ssgconfig user passwords back to 7layer:

passwd
passwd ssgconfig

v.	Set root and ssgconfig user passwords to not expire:

chage -I -1 -m 0 -M 99999 -E -1 root
chage -I -1 -m 0 -M 99999 -E -1 ssgconfig

Edit network 
 

Install  tcpdump
 


•	Prepare Gateway for Portal  Integration
Files	Description

setup-ssg.sh	
	The script that installs the integration components on the Gateway

base30-package.tgz
	
Portal.Integration.Policy.Snippet-v3.0.xml
	
CA_API_Developer_Portal_v3.0.ova
	
Sample-Policy-Template.xml
	
setup-ssg.sh:  These are  the functions  in the scripts :
doExit(),exitOnFailure(),log(),info(),error(),warning(),ask, askNum
 
Logging 
 
CHECK_FILE=/opt/SecureSpan/setup-3.1-ssg.done
Assertions directory=/opt/SecureSpan/Gateway/runtime/modules/assertions
 
Check if the file setup-3.1-ssg.done exist and if it does exist.
 

 
     Check if the base31-package.tgz exist 
 
        Checking the content of the package 
        
Check out the version of SSG
 
Taking Backups and copying new files.
 
Metrics.properties
Database  is  lrsdata  
Omp.dat is  used  in encryting password  in database

If the gateway version id 8.0 or 8.1 extract ApiPortal-8.0.zip
AAR_EXTRACT_FILE=ApiPortalIntegrationAssertion-8.0.aar    DATAAPI_AAR_EXTRACT_FILE=ApiPortalDataLensAssertion-8.0.aar
 BACKUP_FILE_LIST="BACKUP_FILE_LIST $AAR_FILE_8_0"
If the gateway version is 8.2 
METRICS_EXTRACT_FILE=ApiPortal-8.2.zip
AAR_EXTRACT_FILE=ApiPortalIntegrationAssertion-8.2.00.aar
DATAAPI_AAR_EXTRACT_FILE=ApiPortalDataLensAssertion-8.2.00.aar
BACKUP_FILE_LIST="BACKUP_FILE_LIST $AAR_FILE_8_2"
If the gateway version is 8.3
METRICS_EXTRACT_FILE=ApiPortal-8.3.zip
AAR_EXTRACT_FILE=ApiPortalIntegrationAssertion-8.3.00.aar
DATAAPI_AAR_EXTRACT_FILE=ApiPortalDataLensAssertion-8.3.00.aar
 BACKUP_FILE_LIST="BACKUP_FILE_LIST $AAR_FILE_8_3"
 
Create a tarball of the backups
Removed the old files Extract the .aar files and portal metrics and apply the proper permission and ownership
 
Extract the Apiportal metrics into  ApiPortal directory, change  permission and ownership
 
Restore  portal metrics config
 
Restart the ssg service  
 
 



•	Configure your API Portal
•	Configure the Metrics Sync Utility
•	Enable your first API


Version of  Tomcat running
 

Version of apache  running
 

Layer 7: Developer Portal Integration Design
-- API Key Generator --
This section describes how the SSG can issue new API keys for Portal users.  The API Key is an opaque token used in the API portal solution to: 1) authorization access to an API; 2) identify the owner of the token for tracking/billing; and 3) used to generate usage reports.
Key Generator Service
For the portal, a new REST web service endpoint will be exposed on the SSG to issue new API keys.  The configuration for the API key format will be left to gateway administrators to modify the service policy as needed.
Requirements for the API Key generator service:
•	Unique – must be globally unique
•	Signed – signed by the issuer (optional)
Service Definition
		
Service Endpoint URI 
(not final)	“/api/keys/<operation>” 
(note, this endpoint can be modified through the manager and thus should be configurable on the Portal)	
HTTP Methods	GET/POST	
Security
		
Transport	Should support SSL/TLS
-	MA SSL (future)	optional
Authentication	HTTP Basic
-	Username / password resides in SSG identity provider	Required
Request
Argument 
*=required	Type	Description
<operation>*	String	Must be “generate”
service*	String	API/Service identifier (maps to SSG service OID)
debug	Boolean	Sets the debug flag to return additional info for troubleshooting
-	true
-	false  (default is false)
format	String	Specify the return format for the result:
-	xml (default)
-	json
		
Input Validation
Argument	Description	HTTP Status	Error message
<operation>	Operation does not match	500	Bad operation
service	Service OID does not match one that exists on the SSG	500	Invalid service Id
			
Response
The service will return the response message structure below as either XML or JSON.  Default format will be XML (configurable in policy).

<l7:ApiKeyResponse xmlns:l7="http://ns.l7tech.com/2011/08/portal-api-keys">
   <l7:Operation>generate</l7:Operation>
   <l7:Timestamp>08182011-02:13:04.640</l7:Timestamp>
   <l7:Status>200</l7:Status>
   <l7:Message>success</l7:Message>
   <l7:Detail>{message details}</l7:Detail>
   <l7:ApiKey>l7apikey-1310720-00000131db148bc6-3</l7:ApiKey>
   <l7:Properties>
      <!--zero or more Property elements, for e.g.-->
      <l7:Property key="issuer">
         <l7:StringValue>SSG v6.1 [hostname.l7tech.com]</l7:StringValue>
      </l7:Property>
      <l7:Property key="signature">
         <l7:StringValue>blahblahBgNVBAMMDlRlc3QgUHJp=</l7:StringValue>
      </l7:Property>
      <l7:Property key="signature-covers">
         <l7:StringValue>key+timestamp</l7:StringValue>
      </l7:Property>
      <l7:Property key="signature-algorithm">
         <l7:StringValue>HMAC-SHA256</l7:StringValue>
      </l7:Property>
      <l7:Property key="correlId">
         <l7:StringValue>00000131db148bc6-1d</l7:StringValue>
      </l7:Property>
   </l7:Properties>
   <!--debug block omitted -->
</l7:ApiKeyResponse>

Examples
1)	Create a simple API Key
https://hostname:8443/api/keys/generate? service=12345678
-- API Plan Definition --
This section deals with the definition of the API plan content structure on the SSG.  The portal is expected to maintain and push API plan updates to the SSG whenever a CRUD (Create|Read|Update|Delete) operation is perform by the API owner through the portal.
The following are API plan properties that can be configured by the API owner.
Plan Property	Description	L7 Implementation	Rev
Throughput quota	Total requests permitted over a period of time
Eg.
•	#/second, min, hour
•	#/day, month	Apply Throughput Quota (assn)	1.0
Rate limit	Maximum request per sec
Eg.
•	#/sec	Apply Rate Limit (assn)	1.0
Availability			
•	Time of day	Restrict access by time of day	Limit Availability (assn)	1.0
•	Day of week	Restrict access by days of week	Limit Availability (assn)	1.0
•	Date range	Restrict access by date range	Policy	TBD
			
Restrict request attribute			
	IP Address	Restrict access by IP	Restrict Access to IP Range (assn)	TBD
	Hostname	Restrict access by Host	Policy logic	TBD
	Request Size	Limit request message size	Limit Message Size (assn)	TBD
Restrict response attribute			
	Response Size	Limit response size	Limit Message Size (assn)	TBD
			
Plan Content Structure
•	The API plan will be captured as a Layer 7 policy fragment (XML block) that will be pushed to the SSG and applied to the appropriate service policies.
•	Attributes of an API plan that does not map to policy execution assertions will be stored as one or more “CommentAssertion” entries.  These attributes include:
o	Plan id
o	Plan name
o	Enabled flag
o	Private flag
o	Last update timestamp (Long)
•	A complete plan consists of a set of assertions within an “All” assertion (logical AND)
 
•	As XML document
<wsp:Policy 
  xmlns:L7p="http://www.layer7tech.com/ws/policy" 
  xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
   <wsp:All wsp:Usage="Required">
      <wsp:All wsp:Usage="Required">
         <L7p:CommentAssertion>
            <L7p:Comment stringValue="plan.id=122333"/>
         </L7p:CommentAssertion>
         <L7p:CommentAssertion>
            <L7p:Comment stringValue="plan.name=Standard Plan"/>
         </L7p:CommentAssertion>
         <L7p:CommentAssertion>
            <L7p:Comment stringValue="plan.isEnabled=true"/>
         </L7p:CommentAssertion>
         <L7p:CommentAssertion>
            <L7p:Comment stringValue="plan.isPrivate=false"/>
         </L7p:CommentAssertion>
         <L7p:CommentAssertion>
            <L7p:Comment stringValue="plan.lastUpdated=123456789123"/>
         </L7p:CommentAssertion>
         <L7p:ComparisonAssertion>
            <L7p:CaseSensitive booleanValue="false"/>
            <L7p:Expression1 stringValue="${requestApiPlan}"/>
            <L7p:Operator operatorNull="null"/>
            <L7p:Predicates predicates="included">
               <L7p:item dataType="included">
                  <L7p:Type variableDataType="string"/>
               </L7p:item>
               <L7p:item binary="included">
                  <L7p:RightValue stringValue="122333"/>
               </L7p:item>
            </L7p:Predicates>
         </L7p:ComparisonAssertion>

      <!-- Plan attribute assertions goes here -->

    </wsp:All>
  </wsp:All>
</wsp:Policy>


Plan Attributes for Rev 1.0
Throughput Quota
 

<L7p:ThroughputQuota 
     xmlns:L7p="http://www.layer7tech.com/ws/policy" 
     xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
  <L7p:CounterName stringValue="${service.oid}-${apiKey}"/>
  <L7p:CounterStrategy intValue="2"/>
  <L7p:Quota stringValue="100"/>
  <L7p:TimeUnit intValue="4"/>
</L7p:ThroughputQuota>

•	CounterName
o	Static configurable string: “${service.oid}-${requestApiKey}”
•	CounterStrategy
o	Static configurable integer: 2
o	ALWAYS_INCREMENT = 1
o	INCREMENT_ON_SUCCESS = 2
o	DECREMENT = 3
 
•	Quota
o	Integer value set by portal
o	MAX_THROUGHPUT_QUOTA = 100000
•	TimeUnit
o	Value set by portal
o	PER_SECOND = 1
o	PER_MINUTE = 2
o	PER_HOUR = 3
o	PER_DAY = 4
o	PER_MONTH = 5
Rate Limit
 

<L7p:RateLimit
     xmlns:L7p="http://www.layer7tech.com/ws/policy" 
     xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
  <L7p:CounterName stringValue="${service.oid}-${requestApiKey}"/>
  <L7p:MaxRequestsPerSecond stringValue="100"/>
  <L7p:ShapeRequests booleanValue="true"/>
  <L7p:WindowSizeInSeconds stringValue="60"/>
</L7p:RateLimit>

•	CounterName
o	Static configurable string: “${service.oid}-${requestApiKey}”
•	MaxRequestsPerSecond
o	Value set by portal
•	ShapeRequests
o	Static configurable value: “true”
•	WindowSizeInSeconds
o	Static configurable value: 60
Availability
 

<L7p:TimeRange
     xmlns:L7p="http://www.layer7tech.com/ws/policy" 
     xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
  <L7p:ControlDay booleanValue="true"/>
  <L7p:ControlTime booleanValue="true"/>
  <L7p:EndDayOfWeek intValue="6"/>
  <L7p:StartDayOfWeek intValue="2"/>
  <L7p:TimeRange timeOfDayRange="included">
    <L7p:From timeOfDay="included">
                    <L7p:Hour intValue="15"/>
                    <L7p:Minute intValue="10"/>
                    <L7p:Second intValue="5"/>
    </L7p:From>
    <L7p:To timeOfDay="included">
                    <L7p:Hour intValue="17"/>
                    <L7p:Minute intValue="11"/>
                    <L7p:Second intValue="2"/>
    </L7p:To>
  </L7p:TimeRange>
</L7p:TimeRange>

•	ControlDay
o	Value set by portal
•	ControlTime
o	Value set by portal
•	StartDayOfWeek / EndDayOfWeek
o	Value set by portal, only when ControlDay set to true
o	Sunday = 1
o	Monday = 2
o	Tuesday = 3
o	Wednesday = 4
o	Thursday = 5
o	Friday = 6
o	Saturday = 7
•	TimeRange (inner block)
o	Set From/To sections when ControlTime set to true
•	Hour / Minute / Second
o	Values set by portal
Complete Plan Example

<wsp:Policy 
  xmlns:L7p="http://www.layer7tech.com/ws/policy" 
  xmlns:wsp="http://schemas.xmlsoap.org/ws/2002/12/policy">
   <wsp:All wsp:Usage="Required">
      <wsp:All wsp:Usage="Required">
         <L7p:CommentAssertion>
            <L7p:Comment stringValue="plan.id=122333"/>
         </L7p:CommentAssertion>
         <L7p:CommentAssertion>
            <L7p:Comment stringValue="plan.name=Standard Plan"/>
         </L7p:CommentAssertion>
         <L7p:CommentAssertion>
            <L7p:Comment stringValue="plan.isEnabled=true"/>
         </L7p:CommentAssertion>
         <L7p:CommentAssertion>
            <L7p:Comment stringValue="plan.isPrivate=false"/>
         </L7p:CommentAssertion>
         <L7p:CommentAssertion>
            <L7p:Comment stringValue="plan.lastUpdated=123456789123"/>
         </L7p:CommentAssertion>
         <L7p:ComparisonAssertion>
            <L7p:CaseSensitive booleanValue="false"/>
            <L7p:Expression1 stringValue="${requestApiPlan}"/>
            <L7p:Operator operatorNull="null"/>
            <L7p:Predicates predicates="included">
               <L7p:item dataType="included">
                  <L7p:Type variableDataType="string"/>
               </L7p:item>
               <L7p:item binary="included">
                  <L7p:RightValue stringValue="122333"/>
               </L7p:item>
            </L7p:Predicates>
         </L7p:ComparisonAssertion>
         <L7p:ThroughputQuota>
            <L7p:CounterName stringValue="${service.oid}-${apiKey}"/>
            <L7p:Quota stringValue="${maxRequests}"/>
            <L7p:TimeUnit intValue="4"/>
         </L7p:ThroughputQuota>
         <L7p:RateLimit>
            <L7p:CounterName stringValue="${service.oid}-${apiKey}"/>
            <L7p:MaxRequestsPerSecond stringValue="${rateLimitRequests}"/>
            <L7p:ShapeRequests booleanValue="true"/>
            <L7p:WindowSizeInSeconds stringValue="60"/>
         </L7p:RateLimit>
         <L7p:TimeRange>
            <L7p:ControlDay booleanValue="true"/>
            <L7p:ControlTime booleanValue="true"/>
            <L7p:EndDayOfWeek intValue="5"/>
            <L7p:StartDayOfWeek intValue="1"/>
            <L7p:TimeRange timeOfDayRange="included">
               <L7p:From timeOfDay="included">
                  <L7p:Hour intValue="13"/>
               </L7p:From>
               <L7p:To timeOfDay="included">
                  <L7p:Hour intValue="1"/>
               </L7p:To>
            </L7p:TimeRange>
         </L7p:TimeRange>
      </wsp:All>
   </wsp:All>
</wsp:Policy>

Persisting API Plans on the Gateway
The API Plans will be stored in a cluster-wide property on the gateway.  The value of the property will be an XML document with a list of policy fragments, one for each plan defined through the portal.
Cluster property name: 
portal.plans
Document root: 
<L7p:PlanPolicies xmlns:L7p=”http://www.layer7tech.com/ws/policy”>
  <wsp:Policy>
     <!-- Premium plan contents -->
  </wsp:Policy>
  <wsp:Policy>
     <!-- Standard plan contents -->
  </wsp:Policy>
  <wsp:Policy>
     <!-- Sandbox plan contents -->
  </wsp:Policy>
</L7p:PlanPolicies>


Overview
This document covers how metrics information will be passed to the Developer Portal for rendering reports (charts).  Currently, the SecureSpan Gateway (SSG) stores service metrics in an internal database. The set of reports that the portal must support is described in the document “API_Management_PRD_Reports_v1.1.ppt” (by Dana).
Portal Metrics Architecture
Since generating reports via the SSG’s own database would negatively impact runtime performance on processing nodes, a dedicated external database will be used to house the metrics data in support of the reporting requirements on the portal.  The initial structure of the database will consist of the SSG service metrics tables.
In order to insulate the portal from changes to the underlying physical table formats which is subject to change as the SSG evolves, a set of views will be defined for the portal to query against for reports data.  This will both buffer the portal from changes to the underlying metrics tables and provide simplified SQL queries on the portal side.
Finally, the gateway will need a mechanism for pushing the metrics data to the external database based on the following criteria:
•	Only push the subset of data the portal will report on, such as:
o	Only include data for “portal managed” services
o	Only include certain time interval bins (i.e. houly bins)
•	Schedule metrics push must be configurable
o	Default may be once every 15 mins
The following tables from the SSG will be used in the external metrics database:

SSG Table
service_metrics
service_metrics_details
message_context_mapping_keys
message_context_mapping_values
published_service


 
Portal Reports Views
For this release, the following views will be defined for the portal:
View	Description
api_usage_view	View for usage by API
api_key_or_method_usage_view	View for usage by API Key or API method
	
API Usage View
The API view is used for reporting on all usage for an API on the gateway.
+---------------------+--------------+------+-----+---------+-------+
| Field               | Type         | Null | Key | Default | Extra |
+---------------------+--------------+------+-----+---------+-------+
| metric_id           | bigint(20)   | NO   |     | NULL    |       |
| api_id              | bigint(20)   | NO   |     | NULL    |       |
| api_name            | varchar(255) | NO   |     | NULL    |       |
| api_uri             | varchar(128) | YES  |     | NULL    |       |
| resolution          | int(11)      | NO   |     | NULL    |       |
| bin_start_time      | bigint(20)   | NO   |     | NULL    |       |
| bin_end_time        | bigint(20)   | NO   |     | NULL    |       |
| hits_total          | int(11)      | NO   |     | NULL    |       |
| hits_success        | int(11)      | NO   |     | NULL    |       |
| hits_total_errors   | bigint(12)   | NO   |     | 0       |       |
| hits_policy_errors  | bigint(12)   | NO   |     | 0       |       |
| hits_routing_errors | bigint(12)   | NO   |     | 0       |       |
+---------------------+--------------+------+-----+---------+-------+

Column	Description
metric_id	OID for the metrics record
api_id	Service id on the SSG
api_name	API name/lablel
api_uri	URI for the API
resolution	The bin resolution for the metrics record
bin_start_time	Start time for the bin period
bin_end_time	End time for the bin period
hits_total	Total number of hits to the service for the given time period
hits_success	Total number of requests processed successfully
hits_total_errors	Total number of errors
hits_policy_errors	Total number of errors as a result of policy violation
hits_routing_errors	Total number of errors as a result of routing error
	
Sample Queries
•	Hits/usage by API
select sum(hits_total), sum(hits_success), sum(hits_total_errors), api_name, api_uri, api_id
from api_usage_view
where api_id in (?) and bin_start_time >= ? and bin_end_time < ?
group by api_id

API Key / Method Usage View
This view is used for reporting on usage by both API key and API method.
+---------------------+--------------+------+-----+---------+-------+
| Field               | Type         | Null | Key | Default | Extra |
+---------------------+--------------+------+-----+---------+-------+
| metric_id           | bigint(20)   | NO   |     | NULL    |       |
| api_id              | bigint(20)   | NO   |     | NULL    |       |
| api_name            | varchar(255) | NO   |     | NULL    |       |
| api_uri             | varchar(128) | YES  |     | NULL    |       |
| resolution          | int(11)      | NO   |     | NULL    |       |
| bin_start_time      | bigint(20)   | NO   |     | NULL    |       |
| bin_end_time        | bigint(20)   | NO   |     | NULL    |       |
| hits_total          | int(11)      | NO   |     | NULL    |       |
| hits_success        | int(11)      | NO   |     | NULL    |       |
| hits_total_errors   | bigint(12)   | NO   |     | 0       |       |
| hits_policy_errors  | bigint(12)   | NO   |     | 0       |       |
| hits_routing_errors | bigint(12)   | NO   |     | 0       |       |
| api_key             | varchar(255) | YES  |     | NULL    |       |
| api_method          | varchar(255) | YES  |     | NULL    |       |
+---------------------+--------------+------+-----+---------+-------+

Column	Description
metric_id	OID for the metrics record
api_id	Service id on the SSG
api_name	API name/lablel
api_uri	URI for the API
resolution	The bin resolution for the metrics record
bin_start_time	Start time for the bin period
bin_end_time	End time for the bin period
hits_total	Total number of hits to the service for the given time period
hits_success	Total number of requests processed successfully
hits_total_errors	Total number of errors
hits_policy_errors	Total number of errors as a result of policy violation
hits_routing_errors	Total number of errors as a result of routing error
api_key	API key for the bin
api_method	API method for the bin
	
Sample Queries
•	Hits/usage by API key
select sum(hits_total), sum(hits_success), sum(hits_total_errors),api_name, api_uri, api_id, api_key
from api_key_or_method_usage_view
where api_key in (?) and bin_start_time >= ? and bin_end_time < ?
group by api_key

•	Hits/usage by method
select sum(hits_total), sum(hits_success), sum(hits_total_errors),api_name, api_uri, api_id, api_method
from api_key_or_method_usage_view
where api_method in (?) and bin_start_time >= ? and bin_end_time < ?
group by api_method

•	Calculate an error percentage over a time period. use to see services > X% of errors.  (i.e., “rogue” APIs)
select sum(hits_total), sum(hits_success), sum(hits_total_errors),
if(sum(hits_total), (  ( ( (sum(hits_total) - sum(hits_success) ) / sum(hits_total) ) * 100) ) , 0)  as error_total_percentage,
api_name, api_uri, api_id
from api_key_or_method_usage_view
where api_id in (?) and bin_start_time >= ? and bin_end_time < ?
group by api_id











 


 


 

 

 

 

 

 

 

 

 


 

 
